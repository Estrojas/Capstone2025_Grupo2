---
export const prerender = false;
import Layout from "@/layouts/Layout.astro";
import { createServerSupabase } from "@/lib/supabase/supabaseServer.js"; 
import { getSessionSafe } from "@/lib/supabase/supabaseServer.js"; 
import type { ProfileWithRelations } from "@/types/Profile.js"; 
import EditUserForm from "@/components/users/EditUserForm.jsx"; 

const { params, request, cookies } = Astro;
const user_id = params.user_id; 
const { supabase } = await getSessionSafe({ request, cookies });


// Consulta del Usuario
const { data: userDataRaw, error: userError } = await supabase
    .from("user_profiles")
    .select(`
        user_id,
        names,
        last_name_1,
        last_name_2,
        email,
        role,
        status,
        area_id,
        campus_id,
        campus:campus_id ( campus_name ),
        area:area_id ( area_name )`)
    .eq("user_id", user_id)
    .maybeSingle();

// Consulta de Listas de Cat치logos (sin cambios)
const { data: campusList, error: campusErr } = await supabase.from("campus").select("campus_id, campus_name").order("campus_name");
const { data: areaList, error: areaErr } = await supabase.from("areas").select("area_id, area_name").order("area_name");


// Casteamos el resultado bruto antes de normalizar
const userDataBruto = userDataRaw as ProfileWithRelations | null; 

const userData = userDataBruto ? ({
    // Spread solo si userDataBruto NO es null
    ...userDataBruto, 
    // Normalizamos la relaci칩n de joins a objeto o nul
    campus: Array.isArray(userDataBruto.campus) ? userDataBruto.campus[0] || null : userDataBruto.campus,
    area: Array.isArray(userDataBruto.area) ? userDataBruto.area[0] || null : userDataBruto.area,
}) : null;


if (userError) console.error("Error cargando usuario:", userError);
if (campusErr) console.error("Error cargando campus:", campusErr);
if (areaErr) console.error("Error cargando 치reas:", areaErr);


// Tipado final de las listas para el componente React (convertir a string para selects)
const finalCampusList = (campusList || []).map(c => ({...c, campus_id: String(c.campus_id)}));
const finalAreaList = (areaList || []).map(a => ({...a, area_id: String(a.area_id)}));

---

<Layout title={`Editar Usuario: ${user_id}`}>
        <div class="p-10 sm:ml-64">
            <div class="p-4 border-gray-200 border-dashed rounded-lg">
            <h1 class="text-2xl font-bold text-white mb-4">Editar Usuario</h1>

            {userError && (
                <div class="p-3 rounded-lg mb-3 bg-red-50 text-red-800">
                Error: {userError.message}
                </div>
            )}
        {userData ? (
            <EditUserForm 
                userData={userData as ProfileWithRelations} // Aseguramos el tipo final para React
                campusList={finalCampusList} 
                areaList={finalAreaList} 
                client:load 
            />
        ) : (
            <p class="text-gray-500">No se encontr칩 el usuario con ID: {user_id}.</p>
        )}
</Layout>
